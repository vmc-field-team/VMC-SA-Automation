AWSTemplateFormatVersion: 2010-09-09
Description: Deploy all services related to VMC Workshop
Parameters:
  NetworkStackName:
    Description: An infra stack name that is prefixed to resource names
    Type: String 
    Default: student#

  Profile:
    Description: determines locations for url and buckets
    Type: String 
    Default: vmcexpert1

Resources:
# Student EFS
  EFSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: "Security Group for EFS"
        GroupName: !Sub "${NetworkStackName}-EFS-SG"
        VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID1"}
        SecurityGroupIngress: 
        - IpProtocol: '-1'
          CidrIp: 10.10.0.0/16

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
      - Key: Name
        Value: !Ref NetworkStackName

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    # DependsOn:
    #   - EFSSecurityGroup
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID1"}
      SecurityGroups:
        - !Ref EFSSecurityGroup

  #Student ALB
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: "Security Group for ALB"
        GroupName: !Sub "${NetworkStackName}-ALB-SG"
        VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID1"}
        SecurityGroupIngress: 
          - 
            CidrIp: "0.0.0.0/0"
            FromPort: 80
            IpProtocol: "tcp"
            ToPort: 80
          - 
            CidrIp: "0.0.0.0/0"
            FromPort: 443
            IpProtocol: "tcp"
            ToPort: 443

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    # DependsOn:
    #   - ALBSecurityGroup
    Properties:
      Name: !Ref NetworkStackName
      Subnets:
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID1"}
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID2"}
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref NetworkStackName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
          ForwardConfig:
            TargetGroups:
              -
                TargetGroupArn: !Ref DefaultTargetGroup
                Weight: 1
            TargetGroupStickinessConfig:
              DurationSeconds: 500
              Enabled: true

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${NetworkStackName}-default
      TargetType: ip
      VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID1"}
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: 
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400

# Attach ALB to default SG
  ALBInboundRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ALBSecurityGroup
          - GroupId
        GroupId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCSG1"}

# Student RDS
  StudentRDS:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${NetworkStackName}-RDS-Inbound
      GroupDescription: !Sub ${NetworkStackName}-RDS-Inbound
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 10.10.0.0/16
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 67.198.12.121/32
      VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID1"}

  StudentDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: !Sub ${NetworkStackName}SubnetGroup
      DBSubnetGroupName: !Sub ${NetworkStackName}SubnetGroup
      SubnetIds:
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID1"}
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID2"}

  StudentRDSInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '20'
      # AvailabilityZone: us-west-2b
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 5.7.31
      DBSubnetGroupName: !Ref StudentDBSubnetGroup
      VPCSecurityGroups: 
       - !Ref StudentRDS
      MasterUsername: "admin" #!Ref NetworkStackName
      MasterUserPassword: {"Fn::ImportValue": !Sub "${NetworkStackName}-Password"}
      MonitoringInterval: 0
      PubliclyAccessible: false 
      StorageType: gp2
      DBInstanceIdentifier: !Sub VMC-${NetworkStackName}DB
      BackupRetentionPeriod : 0

#Directory Services
  ActiveDirectory: 
    Type: AWS::DirectoryService::MicrosoftAD
    Properties: 
      Name: !Sub "${NetworkStackName}.local"
      Edition: Standard
      Password: {"Fn::ImportValue": !Sub "${NetworkStackName}-Password"}
      ShortName: !Ref NetworkStackName
      VpcSettings: 
        SubnetIds: 
          - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID3"}
          - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID4"}
        VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID2"}

  FSxSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: "Security Group for FSx"
        GroupName: !Sub "${NetworkStackName}-FSx-SG"
        VpcId: {"Fn::ImportValue": !Sub "${NetworkStackName}-VPCID2"}
        SecurityGroupIngress: 
        - IpProtocol: '-1'
          CidrIp: 10.10.0.0/16
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 10.0.0.0/8

  WindowsFSx:
    Type: 'AWS::FSx::FileSystem'
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: 32
      StorageType: SSD
      SubnetIds:
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID3"}
        - {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID4"}
      SecurityGroupIds:
        - !Ref FSxSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref NetworkStackName
      WindowsConfiguration:
        ActiveDirectoryId: !Ref ActiveDirectory
        ThroughputCapacity: 8
        # WeeklyMaintenanceStartTime: '4:16:30'
        # DailyAutomaticBackupStartTime: '01:00'
        # AutomaticBackupRetentionDays: 90
        DeploymentType: MULTI_AZ_1
        PreferredSubnetId: {"Fn::ImportValue": !Sub "${NetworkStackName}-SubnetID3"}
        CopyTagsToBackups: false

  LocationFSxWindows:
    Type: AWS::DataSync::LocationFSxWindows
    Properties: 
      FsxFilesystemArn: !Sub "arn:aws:fsx:${AWS::Region}:${AWS::AccountId}:file-system/${WindowsFSx}"
      SecurityGroupArns: 
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${FSxSecurityGroup}"
      Subdirectory: /share
      Domain: !Sub "${NetworkStackName}.local"
      User: Admin
      Password: {"Fn::ImportValue": !Sub "${NetworkStackName}-Password"}

  S3Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "AWSDataSyncS3BucketAccess-${NetworkStackName}"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - "datasync.amazonaws.com"
          Action: sts:AssumeRole      
 
  S3RolePolicies:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: S3Role
    Properties:
      ManagedPolicyName: !Sub "AWSDataSyncS3BucketAccess-${NetworkStackName}"
      Roles:
        - Ref: S3Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:       
        - Effect: Allow
          Action:
            - s3:GetBucketLocation
            - s3:ListBucket
            - s3:ListBucketMultipartUploads 
          Resource:
          - !Sub "arn:aws:s3:::${Profile}-${AWS::Region}-cf"
        - Effect: Allow
          Action:
            - s3:AbortMultipartUpload
            - s3:DeleteObject
            - s3:GetObject
            - s3:ListMultipartUploadParts
            - s3:PutObjectTagging
            - s3:GetObjectTagging
            - s3:PutObject  
          Resource:
          - !Sub "arn:aws:s3:::${Profile}-${AWS::Region}-cf/*"

  LocationS3:
    Type: AWS::DataSync::LocationS3
    DependsOn: 
      - S3Role
      - S3RolePolicies
    Properties: 
      S3BucketArn: !Sub "arn:aws:s3:::${Profile}-${AWS::Region}-cf"
      S3Config: 
        BucketAccessRoleArn:
          Fn::GetAtt:
          - S3Role
          - Arn
      S3StorageClass: STANDARD
      Subdirectory: /vmc-content

  Task:
    Type: AWS::DataSync::Task
    Properties:
      Name: !Ref NetworkStackName
      SourceLocationArn: !Ref LocationS3
      DestinationLocationArn: !Ref LocationFSxWindows
      Schedule: 
        ScheduleExpression: cron(0 0 * * ? *)